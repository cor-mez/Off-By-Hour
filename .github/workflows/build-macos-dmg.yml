name: Build macOS DMGs (Apple Silicon + Intel)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_NAME: "Off By Hour"
  ENTRYPOINT: "off_by_hour_gui_toggle.py"
  PY_VERSION: "3.11"
  DMG_NAME_ARM64: "Off-By-Hour-macOS-AppleSilicon.dmg"
  DMG_NAME_INTEL: "Off-By-Hour-macOS-Intel.dmg"

jobs:
  macos-arm64:
    name: macOS (Apple Silicon)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install gooey wxPython==4.2.1 pandas numpy openpyxl xlsxwriter pdfplumber PyPDF2
          fi
          python -m pip install pyinstaller

      - name: Clean build dirs
        run: rm -rf build dist

      - name: Build .app with PyInstaller
        run: |
          pyinstaller --windowed --onefile --noconfirm --clean \
            --name "${APP_NAME}" \
            --collect-submodules gooey \
            --collect-submodules wx \
            --collect-data openpyxl \
            --collect-submodules xlsxwriter \
            --collect-submodules pdfplumber \
            --collect-submodules PyPDF2 \
            "${ENTRYPOINT}"
          ls -la dist

      # ===== Sign + Notarize (arm64) =====
      - name: Decode signing assets
        run: |
          echo "${DEV_ID_CERT_P12}" | base64 --decode > dev_id.p12
          echo "${AC_API_KEY_P8}"    | base64 --decode > api_key.p8
        env:
          DEV_ID_CERT_P12: ${{ secrets.DEV_ID_CERT_P12 }}
          AC_API_KEY_P8:   ${{ secrets.AC_API_KEY_P8 }}

      - name: Create temp keychain & import cert
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import dev_id.p12 -k build.keychain -P "${DEV_ID_CERT_PWD}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
        env:
          DEV_ID_CERT_PWD: ${{ secrets.DEV_ID_CERT_PWD }}

      - name: Codesign app (hardened runtime + timestamp)
        run: |
          codesign --deep --force --options runtime --timestamp \
            --sign "${DEV_ID_CERT_NAME}" \
            "dist/${APP_NAME}.app"
          codesign --verify --deep --strict --verbose=2 "dist/${APP_NAME}.app"
        env:
          DEV_ID_CERT_NAME: ${{ secrets.DEV_ID_CERT_NAME }}

      - name: Zip for notarization
        run: |
          ditto -c -k --sequesterRsrc --keepParent \
            "dist/${APP_NAME}.app" "dist/${DMG_NAME_ARM64%.dmg}.zip"

      - name: Notarize (wait)
        run: |
          xcrun notarytool submit "dist/${DMG_NAME_ARM64%.dmg}.zip" \
            --key api_key.p8 \
            --key-id "${AC_API_KEY_ID}" \
            --issuer "${AC_API_ISSUER_ID}" \
            --wait
        env:
          AC_API_KEY_ID:    ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}

      - name: Staple ticket
        run: xcrun stapler staple "dist/${APP_NAME}.app"

      - name: Install create-dmg
        run: |
          brew update
          brew install create-dmg || brew install create-dmg

      - name: Create DMG (Apple Silicon)
        run: |
          create-dmg \
            --volname "${APP_NAME}" \
            --window-size 540 380 \
            --icon "${APP_NAME}.app" 140 160 \
            --app-drop-link 400 160 \
            "dist/${DMG_NAME_ARM64}" "dist/${APP_NAME}.app"

      - name: Upload DMG (Apple Silicon)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/${{ env.DMG_NAME_ARM64 }}

  macos-intel:
    name: macOS (Intel)
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install gooey wxPython==4.2.1 pandas numpy openpyxl xlsxwriter pdfplumber PyPDF2
          fi
          python -m pip install pyinstaller

      - name: Clean build dirs
        run: rm -rf build dist

      - name: Build .app with PyInstaller
        run: |
          pyinstaller --windowed --onefile --noconfirm --clean \
            --name "${APP_NAME}" \
            --collect-submodules gooey \
            --collect-submodules wx \
            --collect-data openpyxl \
            --collect-submodules xlsxwriter \
            --collect-submodules pdfplumber \
            --collect-submodules PyPDF2 \
            "${ENTRYPOINT}"
          ls -la dist

      # ===== Sign + Notarize (Intel) =====
      - name: Decode signing assets
        run: |
          echo "${DEV_ID_CERT_P12}" | base64 --decode > dev_id.p12
          echo "${AC_API_KEY_P8}"    | base64 --decode > api_key.p8
        env:
          DEV_ID_CERT_P12: ${{ secrets.DEV_ID_CERT_P12 }}
          AC_API_KEY_P8:   ${{ secrets.AC_API_KEY_P8 }}

      - name: Create temp keychain & import cert
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import dev_id.p12 -k build.keychain -P "${DEV_ID_CERT_PWD}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain
        env:
          DEV_ID_CERT_PWD: ${{ secrets.DEV_ID_CERT_PWD }}

      - name: Codesign app (hardened runtime + timestamp)
        run: |
          codesign --deep --force --options runtime --timestamp \
            --sign "${DEV_ID_CERT_NAME}" \
            "dist/${APP_NAME}.app"
          codesign --verify --deep --strict --verbose=2 "dist/${APP_NAME}.app"
        env:
          DEV_ID_CERT_NAME: ${{ secrets.DEV_ID_CERT_NAME }}

      - name: Zip for notarization
        run: |
          ditto -c -k --sequesterRsrc --keepParent \
            "dist/${APP_NAME}.app" "dist/${DMG_NAME_INTEL%.dmg}.zip"

      - name: Notarize (wait)
        run: |
          xcrun notarytool submit "dist/${DMG_NAME_INTEL%.dmg}.zip" \
            --key api_key.p8 \
            --key-id "${AC_API_KEY_ID}" \
            --issuer "${AC_API_ISSUER_ID}" \
            --wait
        env:
          AC_API_KEY_ID:    ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}

      - name: Staple ticket
        run: xcrun stapler staple "dist/${APP_NAME}.app"

      - name: Install create-dmg
        run: |
          brew update
          brew install create-dmg || brew install create-dmg

      - name: Create DMG (Intel)
        run: |
          create-dmg \
            --volname "${APP_NAME}" \
            --window-size 540 380 \
            --icon "${APP_NAME}.app" 140 160 \
            --app-drop-link 400 160 \
            "dist/${DMG_NAME_INTEL}" "dist/${APP_NAME}.app"

      - name: Upload DMG (Intel)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/${{ env.DMG_NAME_INTEL }}
